{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CSP",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#supports"
		},
		{
			"include": "#storages"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-dash.csp",
					"begin": "--",
					"end": "\n"
				},
				{	"name": "comment.block.documentation.csp",
					"begin": "{-",
					"end": "-}"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.csp",
					"match": "\\b([0-9]+)\\b"
				},
				{
					"name": "constant.language.boolean.csp",
					"match": "true|false|True|False"				
				},
				{
					"name": "constant.language.process.csp",
					"match": "STOP|DIV|SKIP"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.csp",
					"match": "\\b(if|then|else)\\b"
				},
				{
					"name": "keyword.operator.process.csp",
					"match": "->|\\[\\]|\\|~\\||\\|\\|\\||\\[\\||\\|]|\\[\\[|\\]\\]|\\|\\||;|/\\\\|\\[>|\\\\|\\|\\\\"
				},
				{
					"name": "keyword.operator.channelIO.csp",
					"match": "\\.|\\!|\\?"
				},
				{
					"name": "keyword.operator.miscellaneous.csp",
					"match": "{\\||\\|}|\\.\\.|:|#|<-|<->|==|\\!=|<|>|<=|>=|@|&"
				},
				{
					"name": "keyword.other.refinement.csp",
					"match": "\\[(FD|F|T)="
				},
				{
					"name": "keyword.other.assertion.csp",
					"match": ":\\[(deadlock free|deadlock-free|deterministic|divergence free|divergence-free|livelock free|livelock-free)( \\[F\\]| \\[FD\\])?\\]"
				}
			]
		},
		"supports": {
			"patterns": [
				{
					"name": "support.function.prelude.csp",
					"match": "\\b(length|length|null|head|tail|concat|union|inter|diff|Union|Inter|set|Set|Seq|empty|card|member|seq|elem|Int|Bool|Proc|Events|Char)\\b"
				}
			]
		},
		"storages": {
			"patterns": [
				{
				"name": "storage.type.csp",
				"match": "\\b(assert|datatype|channel)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.csp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.csp",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.csp"
}